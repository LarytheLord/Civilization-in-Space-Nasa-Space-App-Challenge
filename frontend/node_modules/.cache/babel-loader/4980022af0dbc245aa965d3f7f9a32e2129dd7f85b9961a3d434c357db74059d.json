{"ast":null,"code":"// Mock Data Service - Simulates LunaBot telemetry without backend\n\nclass MockDataService {\n  constructor() {\n    this.sensorData = void 0;\n    this.sites = void 0;\n    this.missionLogs = void 0;\n    this.updateInterval = null;\n    this.sensorData = this.generateInitialSensorData();\n    this.sites = this.generateSites(8);\n    this.missionLogs = this.generateInitialLogs();\n  }\n  generateInitialSensorData() {\n    return {\n      radiation: {\n        cosmic: 0.42,\n        solar: 0.18,\n        total: 0.60,\n        status: 'optimal'\n      },\n      seismic: {\n        frequency: 1.2,\n        magnitude: 0.3,\n        stability: 94,\n        lastQuake: '12h 34m ago',\n        status: 'stable'\n      },\n      regolith: {\n        composition: {\n          iron: 14.2,\n          titanium: 3.8,\n          silicon: 42.5,\n          aluminum: 12.1,\n          calcium: 9.4,\n          magnesium: 7.2\n        },\n        density: 1.52,\n        waterIce: 0.8,\n        isruPotential: 78\n      },\n      thermal: {\n        surface: -23,\n        subsurface: -18,\n        gradient: 5,\n        status: 'nominal'\n      },\n      lidar: {\n        range: 150,\n        pointsPerSecond: 300000,\n        obstaclesDetected: 3,\n        terrainRoughness: 42\n      },\n      cameras: {\n        frontCamera: {\n          status: 'ONLINE',\n          resolution: '4K'\n        },\n        rearCamera: {\n          status: 'ONLINE',\n          resolution: '4K'\n        },\n        visibility: 98,\n        dustLevel: 12\n      },\n      spectrometer: {\n        waterSignature: 45,\n        mineralSignature: 'Anorthite detected',\n        volatileDetection: 32\n      },\n      environmental: {\n        solarExposure: 87,\n        uvRadiation: 245,\n        electrostaticCharge: 2.3,\n        dustParticles: 145\n      },\n      power: {\n        solar: 380,\n        rtg: 120,\n        battery: 94,\n        consumption: 48,\n        status: 'optimal'\n      },\n      navigation: {\n        position: {\n          x: 124.5,\n          y: 89.3,\n          z: 2.1\n        },\n        heading: 142,\n        speed: 0.8,\n        distance: 3.247\n      }\n    };\n  }\n  generateSites(count) {\n    const sites = [];\n    for (let i = 0; i < count; i++) {\n      const safety = 60 + Math.random() * 35;\n      const resources = 50 + Math.random() * 45;\n      const buildability = 55 + Math.random() * 40;\n      const expandability = 50 + Math.random() * 45;\n\n      // Weighted scoring: Safety 40%, Resources 30%, Construction 20%, Science 10%\n      const total = safety * 0.4 + resources * 0.3 + buildability * 0.2 + expandability * 0.1;\n      sites.push({\n        id: i + 1,\n        position: {\n          x: 100 + Math.random() * 100 - 50,\n          y: 80 + Math.random() * 100 - 50\n        },\n        scores: {\n          safety: Math.round(safety * 10) / 10,\n          resources: Math.round(resources * 10) / 10,\n          buildability: Math.round(buildability * 10) / 10,\n          expandability: Math.round(expandability * 10) / 10\n        },\n        total_score: Math.round(total * 10) / 10,\n        details: {\n          radiation: 0.3 + Math.random() * 0.6,\n          terrain: ['Flat Mare', 'Highland Crater', 'Gentle Slope', 'Ridge Area'][Math.floor(Math.random() * 4)],\n          waterIce: Math.random() * 2.5,\n          solarExposure: 70 + Math.random() * 30,\n          seismicStability: 80 + Math.random() * 20\n        }\n      });\n    }\n\n    // Sort by total score descending\n    return sites.sort((a, b) => b.total_score - a.total_score);\n  }\n  generateInitialLogs() {\n    const now = new Date();\n    return [{\n      timestamp: new Date(now.getTime() - 300000).toISOString(),\n      type: 'success',\n      message: 'LunaBot systems initialized successfully',\n      subsystem: 'CORE'\n    }, {\n      timestamp: new Date(now.getTime() - 240000).toISOString(),\n      type: 'info',\n      message: 'Multi-sensor array online - all sensors nominal',\n      subsystem: 'SENSORS'\n    }, {\n      timestamp: new Date(now.getTime() - 180000).toISOString(),\n      type: 'info',\n      message: 'Autonomous navigation system activated',\n      subsystem: 'NAV'\n    }, {\n      timestamp: new Date(now.getTime() - 120000).toISOString(),\n      type: 'success',\n      message: 'Initial site analysis complete - 8 sites identified',\n      subsystem: 'ANALYSIS'\n    }, {\n      timestamp: new Date(now.getTime() - 60000).toISOString(),\n      type: 'info',\n      message: 'Water ice signature detected at Site 2',\n      subsystem: 'SPECTROMETER'\n    }];\n  }\n\n  // Simulate realistic sensor updates\n  updateSensorData() {\n    // Radiation - slow drift\n    this.sensorData.radiation.cosmic += (Math.random() - 0.5) * 0.02;\n    this.sensorData.radiation.solar += (Math.random() - 0.5) * 0.05;\n    this.sensorData.radiation.total = this.sensorData.radiation.cosmic + this.sensorData.radiation.solar;\n\n    // Keep radiation in realistic range\n    this.sensorData.radiation.cosmic = Math.max(0.3, Math.min(0.6, this.sensorData.radiation.cosmic));\n    this.sensorData.radiation.solar = Math.max(0.1, Math.min(0.4, this.sensorData.radiation.solar));\n\n    // Seismic - occasional activity\n    if (Math.random() < 0.05) {\n      this.sensorData.seismic.magnitude = Math.random() * 1.5;\n      this.addMissionLog('warning', 'Minor seismic activity detected', 'SEISMIC');\n    } else {\n      this.sensorData.seismic.magnitude *= 0.95;\n    }\n    this.sensorData.seismic.stability = 100 - this.sensorData.seismic.magnitude * 20;\n\n    // Thermal - slow temperature changes\n    this.sensorData.thermal.surface += (Math.random() - 0.5) * 2;\n    this.sensorData.thermal.surface = Math.max(-50, Math.min(10, this.sensorData.thermal.surface));\n    this.sensorData.thermal.subsurface = this.sensorData.thermal.surface + 5;\n\n    // Navigation - simulate movement\n    this.sensorData.navigation.position.x += Math.sin(this.sensorData.navigation.heading * Math.PI / 180) * this.sensorData.navigation.speed * 0.1;\n    this.sensorData.navigation.position.y += Math.cos(this.sensorData.navigation.heading * Math.PI / 180) * this.sensorData.navigation.speed * 0.1;\n    this.sensorData.navigation.distance += this.sensorData.navigation.speed * 0.0001;\n\n    // Power - fluctuate slightly\n    this.sensorData.power.solar = 350 + Math.random() * 50;\n    this.sensorData.power.battery += (Math.random() - 0.48) * 0.5; // Slow charging\n    this.sensorData.power.battery = Math.max(85, Math.min(100, this.sensorData.power.battery));\n\n    // LiDAR\n    this.sensorData.lidar.obstaclesDetected = Math.floor(Math.random() * 5);\n\n    // Spectrometer\n    this.sensorData.spectrometer.waterSignature += (Math.random() - 0.5) * 5;\n    this.sensorData.spectrometer.waterSignature = Math.max(0, Math.min(100, this.sensorData.spectrometer.waterSignature));\n\n    // Occasionally add mission logs\n    if (Math.random() < 0.1) {\n      const messages = [{\n        type: 'info',\n        msg: 'Terrain mapping in progress',\n        sys: 'LIDAR'\n      }, {\n        type: 'info',\n        msg: 'Regolith sample analyzed',\n        sys: 'XRF'\n      }, {\n        type: 'success',\n        msg: 'Site scoring updated',\n        sys: 'ANALYSIS'\n      }, {\n        type: 'info',\n        msg: 'Navigation waypoint reached',\n        sys: 'NAV'\n      }];\n      const selected = messages[Math.floor(Math.random() * messages.length)];\n      this.addMissionLog(selected.type, selected.msg, selected.sys);\n    }\n  }\n  addMissionLog(type, message, subsystem) {\n    this.missionLogs.unshift({\n      timestamp: new Date().toISOString(),\n      type,\n      message,\n      subsystem\n    });\n\n    // Keep only last 50 logs\n    if (this.missionLogs.length > 50) {\n      this.missionLogs = this.missionLogs.slice(0, 50);\n    }\n  }\n\n  // Public API\n  startSimulation(callback) {\n    this.updateInterval = setInterval(() => {\n      this.updateSensorData();\n      callback({\n        sensors: this.sensorData,\n        sites: this.sites,\n        logs: this.missionLogs\n      });\n    }, 1000); // Update every second\n\n    // Immediate first call\n    callback({\n      sensors: this.sensorData,\n      sites: this.sites,\n      logs: this.missionLogs\n    });\n  }\n  stopSimulation() {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n    }\n  }\n  getSensorData() {\n    return this.sensorData;\n  }\n  getSites() {\n    return this.sites;\n  }\n  getMissionLogs() {\n    return this.missionLogs;\n  }\n}\nexport default new MockDataService();","map":{"version":3,"names":["MockDataService","constructor","sensorData","sites","missionLogs","updateInterval","generateInitialSensorData","generateSites","generateInitialLogs","radiation","cosmic","solar","total","status","seismic","frequency","magnitude","stability","lastQuake","regolith","composition","iron","titanium","silicon","aluminum","calcium","magnesium","density","waterIce","isruPotential","thermal","surface","subsurface","gradient","lidar","range","pointsPerSecond","obstaclesDetected","terrainRoughness","cameras","frontCamera","resolution","rearCamera","visibility","dustLevel","spectrometer","waterSignature","mineralSignature","volatileDetection","environmental","solarExposure","uvRadiation","electrostaticCharge","dustParticles","power","rtg","battery","consumption","navigation","position","x","y","z","heading","speed","distance","count","i","safety","Math","random","resources","buildability","expandability","push","id","scores","round","total_score","details","terrain","floor","seismicStability","sort","a","b","now","Date","timestamp","getTime","toISOString","type","message","subsystem","updateSensorData","max","min","addMissionLog","sin","PI","cos","messages","msg","sys","selected","length","unshift","slice","startSimulation","callback","setInterval","sensors","logs","stopSimulation","clearInterval","getSensorData","getSites","getMissionLogs"],"sources":["C:/Users/A R Khan/OneDrive/Documents/Nasa/robot/frontend/src/utils/mockDataService.ts"],"sourcesContent":["// Mock Data Service - Simulates LunaBot telemetry without backend\r\n\r\nexport interface SensorData {\r\n  // Radiation sensors (TEPC)\r\n  radiation: {\r\n    cosmic: number; // mSv/h\r\n    solar: number;  // mSv/h\r\n    total: number;\r\n    status: 'optimal' | 'caution' | 'critical';\r\n  };\r\n  \r\n  // Seismic sensors\r\n  seismic: {\r\n    frequency: number; // Hz\r\n    magnitude: number;\r\n    stability: number; // 0-100\r\n    lastQuake: string;\r\n    status: 'stable' | 'minor' | 'major';\r\n  };\r\n  \r\n  // Regolith analyzer (XRF)\r\n  regolith: {\r\n    composition: {\r\n      iron: number;\r\n      titanium: number;\r\n      silicon: number;\r\n      aluminum: number;\r\n      calcium: number;\r\n      magnesium: number;\r\n    };\r\n    density: number; // g/cm³\r\n    waterIce: number; // percentage\r\n    isruPotential: number; // 0-100\r\n  };\r\n  \r\n  // Thermal sensors\r\n  thermal: {\r\n    surface: number; // °C\r\n    subsurface: number;\r\n    gradient: number;\r\n    status: 'nominal' | 'hot' | 'cold';\r\n  };\r\n  \r\n  // LiDAR\r\n  lidar: {\r\n    range: number; // meters\r\n    pointsPerSecond: number;\r\n    obstaclesDetected: number;\r\n    terrainRoughness: number; // 0-100\r\n  };\r\n  \r\n  // Cameras\r\n  cameras: {\r\n    frontCamera: { status: string; resolution: string; };\r\n    rearCamera: { status: string; resolution: string; };\r\n    visibility: number; // 0-100\r\n    dustLevel: number; // 0-100\r\n  };\r\n  \r\n  // Spectrometer\r\n  spectrometer: {\r\n    waterSignature: number; // 0-100\r\n    mineralSignature: string;\r\n    volatileDetection: number; // 0-100\r\n  };\r\n  \r\n  // Environmental\r\n  environmental: {\r\n    solarExposure: number; // 0-100\r\n    uvRadiation: number;\r\n    electrostaticCharge: number;\r\n    dustParticles: number; // per m³\r\n  };\r\n  \r\n  // Power system\r\n  power: {\r\n    solar: number; // watts\r\n    rtg: number;   // watts\r\n    battery: number; // percentage\r\n    consumption: number; // watts\r\n    status: 'optimal' | 'reduced' | 'critical';\r\n  };\r\n  \r\n  // Navigation\r\n  navigation: {\r\n    position: { x: number; y: number; z: number };\r\n    heading: number; // degrees\r\n    speed: number;   // m/s\r\n    distance: number; // total km traveled\r\n  };\r\n}\r\n\r\nexport interface Site {\r\n  id: number;\r\n  position: { x: number; y: number };\r\n  scores: {\r\n    safety: number;\r\n    resources: number;\r\n    buildability: number;\r\n    expandability: number;\r\n  };\r\n  total_score: number;\r\n  details: {\r\n    radiation: number;\r\n    terrain: string;\r\n    waterIce: number;\r\n    solarExposure: number;\r\n    seismicStability: number;\r\n  };\r\n}\r\n\r\nexport interface MissionLog {\r\n  timestamp: string;\r\n  type: 'info' | 'warning' | 'success' | 'error';\r\n  message: string;\r\n  subsystem?: string;\r\n}\r\n\r\nclass MockDataService {\r\n  private sensorData: SensorData;\r\n  private sites: Site[];\r\n  private missionLogs: MissionLog[];\r\n  private updateInterval: NodeJS.Timeout | null = null;\r\n  \r\n  constructor() {\r\n    this.sensorData = this.generateInitialSensorData();\r\n    this.sites = this.generateSites(8);\r\n    this.missionLogs = this.generateInitialLogs();\r\n  }\r\n  \r\n  private generateInitialSensorData(): SensorData {\r\n    return {\r\n      radiation: {\r\n        cosmic: 0.42,\r\n        solar: 0.18,\r\n        total: 0.60,\r\n        status: 'optimal'\r\n      },\r\n      seismic: {\r\n        frequency: 1.2,\r\n        magnitude: 0.3,\r\n        stability: 94,\r\n        lastQuake: '12h 34m ago',\r\n        status: 'stable'\r\n      },\r\n      regolith: {\r\n        composition: {\r\n          iron: 14.2,\r\n          titanium: 3.8,\r\n          silicon: 42.5,\r\n          aluminum: 12.1,\r\n          calcium: 9.4,\r\n          magnesium: 7.2\r\n        },\r\n        density: 1.52,\r\n        waterIce: 0.8,\r\n        isruPotential: 78\r\n      },\r\n      thermal: {\r\n        surface: -23,\r\n        subsurface: -18,\r\n        gradient: 5,\r\n        status: 'nominal'\r\n      },\r\n      lidar: {\r\n        range: 150,\r\n        pointsPerSecond: 300000,\r\n        obstaclesDetected: 3,\r\n        terrainRoughness: 42\r\n      },\r\n      cameras: {\r\n        frontCamera: { status: 'ONLINE', resolution: '4K' },\r\n        rearCamera: { status: 'ONLINE', resolution: '4K' },\r\n        visibility: 98,\r\n        dustLevel: 12\r\n      },\r\n      spectrometer: {\r\n        waterSignature: 45,\r\n        mineralSignature: 'Anorthite detected',\r\n        volatileDetection: 32\r\n      },\r\n      environmental: {\r\n        solarExposure: 87,\r\n        uvRadiation: 245,\r\n        electrostaticCharge: 2.3,\r\n        dustParticles: 145\r\n      },\r\n      power: {\r\n        solar: 380,\r\n        rtg: 120,\r\n        battery: 94,\r\n        consumption: 48,\r\n        status: 'optimal'\r\n      },\r\n      navigation: {\r\n        position: { x: 124.5, y: 89.3, z: 2.1 },\r\n        heading: 142,\r\n        speed: 0.8,\r\n        distance: 3.247\r\n      }\r\n    };\r\n  }\r\n  \r\n  private generateSites(count: number): Site[] {\r\n    const sites: Site[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const safety = 60 + Math.random() * 35;\r\n      const resources = 50 + Math.random() * 45;\r\n      const buildability = 55 + Math.random() * 40;\r\n      const expandability = 50 + Math.random() * 45;\r\n      \r\n      // Weighted scoring: Safety 40%, Resources 30%, Construction 20%, Science 10%\r\n      const total = (safety * 0.4) + (resources * 0.3) + (buildability * 0.2) + (expandability * 0.1);\r\n      \r\n      sites.push({\r\n        id: i + 1,\r\n        position: {\r\n          x: 100 + (Math.random() * 100) - 50,\r\n          y: 80 + (Math.random() * 100) - 50\r\n        },\r\n        scores: {\r\n          safety: Math.round(safety * 10) / 10,\r\n          resources: Math.round(resources * 10) / 10,\r\n          buildability: Math.round(buildability * 10) / 10,\r\n          expandability: Math.round(expandability * 10) / 10\r\n        },\r\n        total_score: Math.round(total * 10) / 10,\r\n        details: {\r\n          radiation: 0.3 + Math.random() * 0.6,\r\n          terrain: ['Flat Mare', 'Highland Crater', 'Gentle Slope', 'Ridge Area'][Math.floor(Math.random() * 4)],\r\n          waterIce: Math.random() * 2.5,\r\n          solarExposure: 70 + Math.random() * 30,\r\n          seismicStability: 80 + Math.random() * 20\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Sort by total score descending\r\n    return sites.sort((a, b) => b.total_score - a.total_score);\r\n  }\r\n  \r\n  private generateInitialLogs(): MissionLog[] {\r\n    const now = new Date();\r\n    return [\r\n      {\r\n        timestamp: new Date(now.getTime() - 300000).toISOString(),\r\n        type: 'success',\r\n        message: 'LunaBot systems initialized successfully',\r\n        subsystem: 'CORE'\r\n      },\r\n      {\r\n        timestamp: new Date(now.getTime() - 240000).toISOString(),\r\n        type: 'info',\r\n        message: 'Multi-sensor array online - all sensors nominal',\r\n        subsystem: 'SENSORS'\r\n      },\r\n      {\r\n        timestamp: new Date(now.getTime() - 180000).toISOString(),\r\n        type: 'info',\r\n        message: 'Autonomous navigation system activated',\r\n        subsystem: 'NAV'\r\n      },\r\n      {\r\n        timestamp: new Date(now.getTime() - 120000).toISOString(),\r\n        type: 'success',\r\n        message: 'Initial site analysis complete - 8 sites identified',\r\n        subsystem: 'ANALYSIS'\r\n      },\r\n      {\r\n        timestamp: new Date(now.getTime() - 60000).toISOString(),\r\n        type: 'info',\r\n        message: 'Water ice signature detected at Site 2',\r\n        subsystem: 'SPECTROMETER'\r\n      }\r\n    ];\r\n  }\r\n  \r\n  // Simulate realistic sensor updates\r\n  private updateSensorData() {\r\n    // Radiation - slow drift\r\n    this.sensorData.radiation.cosmic += (Math.random() - 0.5) * 0.02;\r\n    this.sensorData.radiation.solar += (Math.random() - 0.5) * 0.05;\r\n    this.sensorData.radiation.total = this.sensorData.radiation.cosmic + this.sensorData.radiation.solar;\r\n    \r\n    // Keep radiation in realistic range\r\n    this.sensorData.radiation.cosmic = Math.max(0.3, Math.min(0.6, this.sensorData.radiation.cosmic));\r\n    this.sensorData.radiation.solar = Math.max(0.1, Math.min(0.4, this.sensorData.radiation.solar));\r\n    \r\n    // Seismic - occasional activity\r\n    if (Math.random() < 0.05) {\r\n      this.sensorData.seismic.magnitude = Math.random() * 1.5;\r\n      this.addMissionLog('warning', 'Minor seismic activity detected', 'SEISMIC');\r\n    } else {\r\n      this.sensorData.seismic.magnitude *= 0.95;\r\n    }\r\n    this.sensorData.seismic.stability = 100 - (this.sensorData.seismic.magnitude * 20);\r\n    \r\n    // Thermal - slow temperature changes\r\n    this.sensorData.thermal.surface += (Math.random() - 0.5) * 2;\r\n    this.sensorData.thermal.surface = Math.max(-50, Math.min(10, this.sensorData.thermal.surface));\r\n    this.sensorData.thermal.subsurface = this.sensorData.thermal.surface + 5;\r\n    \r\n    // Navigation - simulate movement\r\n    this.sensorData.navigation.position.x += Math.sin(this.sensorData.navigation.heading * Math.PI / 180) * this.sensorData.navigation.speed * 0.1;\r\n    this.sensorData.navigation.position.y += Math.cos(this.sensorData.navigation.heading * Math.PI / 180) * this.sensorData.navigation.speed * 0.1;\r\n    this.sensorData.navigation.distance += this.sensorData.navigation.speed * 0.0001;\r\n    \r\n    // Power - fluctuate slightly\r\n    this.sensorData.power.solar = 350 + Math.random() * 50;\r\n    this.sensorData.power.battery += (Math.random() - 0.48) * 0.5; // Slow charging\r\n    this.sensorData.power.battery = Math.max(85, Math.min(100, this.sensorData.power.battery));\r\n    \r\n    // LiDAR\r\n    this.sensorData.lidar.obstaclesDetected = Math.floor(Math.random() * 5);\r\n    \r\n    // Spectrometer\r\n    this.sensorData.spectrometer.waterSignature += (Math.random() - 0.5) * 5;\r\n    this.sensorData.spectrometer.waterSignature = Math.max(0, Math.min(100, this.sensorData.spectrometer.waterSignature));\r\n    \r\n    // Occasionally add mission logs\r\n    if (Math.random() < 0.1) {\r\n      const messages = [\r\n        { type: 'info' as const, msg: 'Terrain mapping in progress', sys: 'LIDAR' },\r\n        { type: 'info' as const, msg: 'Regolith sample analyzed', sys: 'XRF' },\r\n        { type: 'success' as const, msg: 'Site scoring updated', sys: 'ANALYSIS' },\r\n        { type: 'info' as const, msg: 'Navigation waypoint reached', sys: 'NAV' },\r\n      ];\r\n      const selected = messages[Math.floor(Math.random() * messages.length)];\r\n      this.addMissionLog(selected.type, selected.msg, selected.sys);\r\n    }\r\n  }\r\n  \r\n  private addMissionLog(type: MissionLog['type'], message: string, subsystem?: string) {\r\n    this.missionLogs.unshift({\r\n      timestamp: new Date().toISOString(),\r\n      type,\r\n      message,\r\n      subsystem\r\n    });\r\n    \r\n    // Keep only last 50 logs\r\n    if (this.missionLogs.length > 50) {\r\n      this.missionLogs = this.missionLogs.slice(0, 50);\r\n    }\r\n  }\r\n  \r\n  // Public API\r\n  startSimulation(callback: (data: { sensors: SensorData; sites: Site[]; logs: MissionLog[] }) => void) {\r\n    this.updateInterval = setInterval(() => {\r\n      this.updateSensorData();\r\n      callback({\r\n        sensors: this.sensorData,\r\n        sites: this.sites,\r\n        logs: this.missionLogs\r\n      });\r\n    }, 1000); // Update every second\r\n    \r\n    // Immediate first call\r\n    callback({\r\n      sensors: this.sensorData,\r\n      sites: this.sites,\r\n      logs: this.missionLogs\r\n    });\r\n  }\r\n  \r\n  stopSimulation() {\r\n    if (this.updateInterval) {\r\n      clearInterval(this.updateInterval);\r\n    }\r\n  }\r\n  \r\n  getSensorData() {\r\n    return this.sensorData;\r\n  }\r\n  \r\n  getSites() {\r\n    return this.sites;\r\n  }\r\n  \r\n  getMissionLogs() {\r\n    return this.missionLogs;\r\n  }\r\n}\r\n\r\nexport default new MockDataService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}