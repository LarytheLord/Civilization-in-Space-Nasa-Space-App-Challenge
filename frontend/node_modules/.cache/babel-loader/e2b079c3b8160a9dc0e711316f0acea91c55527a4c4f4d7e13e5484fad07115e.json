{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from 'react';\nexport const useWebSocket = url => {\n  _s();\n  const [data, setData] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n\n  // Maximum number of reconnection attempts\n  const maxReconnectAttempts = 10;\n  // Reconnection delay in milliseconds\n  const reconnectDelay = 3000;\n  const connect = useCallback(() => {\n    try {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      wsRef.current = new WebSocket(url);\n      wsRef.current.onopen = () => {\n        console.log('WebSocket connected');\n        setConnected(true);\n        setReconnectAttempts(0); // Reset attempts on successful connection\n      };\n      wsRef.current.onmessage = event => {\n        try {\n          const message = JSON.parse(event.data);\n          setData(prev => ({\n            ...prev,\n            [message.type]: message.data\n          }));\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      wsRef.current.onclose = () => {\n        console.log('WebSocket disconnected');\n        setConnected(false);\n\n        // Attempt to reconnect if we haven't exceeded max attempts\n        if (reconnectAttempts < maxReconnectAttempts) {\n          console.log(`Attempting to reconnect... (${reconnectAttempts + 1}/${maxReconnectAttempts})`);\n          setReconnectAttempts(prev => prev + 1);\n          if (reconnectTimeoutRef.current) {\n            clearTimeout(reconnectTimeoutRef.current);\n          }\n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, reconnectDelay);\n        } else {\n          console.error('Max reconnection attempts reached. Please refresh the page.');\n        }\n      };\n      wsRef.current.onerror = error => {\n        console.error('WebSocket error:', error);\n        setConnected(false);\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setConnected(false);\n\n      // Attempt to reconnect if we haven't exceeded max attempts\n      if (reconnectAttempts < maxReconnectAttempts) {\n        console.log(`Attempting to reconnect... (${reconnectAttempts + 1}/${maxReconnectAttempts})`);\n        setReconnectAttempts(prev => prev + 1);\n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, reconnectDelay);\n      }\n    }\n  }, [url, maxReconnectAttempts, reconnectDelay, reconnectAttempts]);\n  useEffect(() => {\n    connect();\n    return () => {\n      // Clear any pending reconnection timeout\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n\n      // Close the WebSocket connection\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [connect]);\n\n  // Function to manually trigger a reconnect\n  const manualReconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    setReconnectAttempts(0);\n    connect();\n  }, [connect]);\n  return {\n    data,\n    connected,\n    reconnect: manualReconnect\n  };\n};\n_s(useWebSocket, \"cIm8/1/Sm8akTBOCrEhcoawg2CI=\");","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","useWebSocket","url","_s","data","setData","connected","setConnected","reconnectAttempts","setReconnectAttempts","wsRef","reconnectTimeoutRef","maxReconnectAttempts","reconnectDelay","connect","current","close","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","prev","type","error","onclose","clearTimeout","setTimeout","onerror","manualReconnect","reconnect"],"sources":["C:/Users/A R Khan/OneDrive/Documents/Nasa/robot/frontend/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\n\nexport const useWebSocket = (url: string) => {\n  const [data, setData] = useState<any>({});\n  const [connected, setConnected] = useState(false);\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Maximum number of reconnection attempts\n  const maxReconnectAttempts = 10;\n  // Reconnection delay in milliseconds\n  const reconnectDelay = 3000;\n\n  const connect = useCallback(() => {\n    try {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      \n      wsRef.current = new WebSocket(url);\n\n      wsRef.current.onopen = () => {\n        console.log('WebSocket connected');\n        setConnected(true);\n        setReconnectAttempts(0); // Reset attempts on successful connection\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          setData((prev: any) => ({\n            ...prev,\n            [message.type]: message.data\n          }));\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      wsRef.current.onclose = () => {\n        console.log('WebSocket disconnected');\n        setConnected(false);\n        \n        // Attempt to reconnect if we haven't exceeded max attempts\n        if (reconnectAttempts < maxReconnectAttempts) {\n          console.log(`Attempting to reconnect... (${reconnectAttempts + 1}/${maxReconnectAttempts})`);\n          setReconnectAttempts(prev => prev + 1);\n          \n          if (reconnectTimeoutRef.current) {\n            clearTimeout(reconnectTimeoutRef.current);\n          }\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, reconnectDelay);\n        } else {\n          console.error('Max reconnection attempts reached. Please refresh the page.');\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setConnected(false);\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setConnected(false);\n      \n      // Attempt to reconnect if we haven't exceeded max attempts\n      if (reconnectAttempts < maxReconnectAttempts) {\n        console.log(`Attempting to reconnect... (${reconnectAttempts + 1}/${maxReconnectAttempts})`);\n        setReconnectAttempts(prev => prev + 1);\n        \n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n        \n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, reconnectDelay);\n      }\n    }\n  }, [url, maxReconnectAttempts, reconnectDelay, reconnectAttempts]);\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      // Clear any pending reconnection timeout\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      \n      // Close the WebSocket connection\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [connect]);\n\n  // Function to manually trigger a reconnect\n  const manualReconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    setReconnectAttempts(0);\n    connect();\n  }, [connect]);\n\n  return { data, connected, reconnect: manualReconnect };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}