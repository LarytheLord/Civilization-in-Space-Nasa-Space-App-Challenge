{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nexport const useWebSocket = url => {\n  _s();\n  const [data, setData] = useState({});\n  const [connected, setConnected] = useState(false);\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n\n  // Maximum number of reconnection attempts\n  const maxReconnectAttempts = 10;\n  // Reconnection delay in milliseconds\n  const reconnectDelay = 3000;\n  useEffect(() => {\n    const connect = () => {\n      try {\n        wsRef.current = new WebSocket(url);\n        wsRef.current.onopen = () => {\n          console.log('WebSocket connected');\n          setConnected(true);\n          setReconnectAttempts(0); // Reset attempts on successful connection\n        };\n        wsRef.current.onmessage = event => {\n          try {\n            const message = JSON.parse(event.data);\n            setData(prev => ({\n              ...prev,\n              [message.type]: message.data\n            }));\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        wsRef.current.onclose = () => {\n          console.log('WebSocket disconnected');\n          setConnected(false);\n\n          // Attempt to reconnect if we haven't exceeded max attempts\n          if (reconnectAttempts < maxReconnectAttempts) {\n            console.log(`Attempting to reconnect... (${reconnectAttempts + 1}/${maxReconnectAttempts})`);\n            setReconnectAttempts(prev => prev + 1);\n            if (reconnectTimeoutRef.current) {\n              clearTimeout(reconnectTimeoutRef.current);\n            }\n            reconnectTimeoutRef.current = setTimeout(() => {\n              connect();\n            }, reconnectDelay);\n          } else {\n            console.error('Max reconnection attempts reached. Please refresh the page.');\n          }\n        };\n        wsRef.current.onerror = error => {\n          console.error('WebSocket error:', error);\n          setConnected(false);\n        };\n      } catch (error) {\n        console.error('Failed to create WebSocket connection:', error);\n        setConnected(false);\n\n        // Attempt to reconnect if we haven't exceeded max attempts\n        if (reconnectAttempts < maxReconnectAttempts) {\n          console.log(`Attempting to reconnect... (${reconnectAttempts + 1}/${maxReconnectAttempts})`);\n          setReconnectAttempts(prev => prev + 1);\n          if (reconnectTimeoutRef.current) {\n            clearTimeout(reconnectTimeoutRef.current);\n          }\n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, reconnectDelay);\n        }\n      }\n    };\n    connect();\n    return () => {\n      // Clear any pending reconnection timeout\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n\n      // Close the WebSocket connection\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [url]);\n\n  // Function to manually trigger a reconnect\n  const reconnect = () => {\n    if (wsRef.current) {\n      wsRef.current.close();\n    }\n    setReconnectAttempts(0);\n    connect();\n  };\n  return {\n    data,\n    connected,\n    reconnect\n  };\n};\n_s(useWebSocket, \"F05+JypFPecEPoRk9IlNuFq81qM=\");","map":{"version":3,"names":["useEffect","useState","useRef","useWebSocket","url","_s","data","setData","connected","setConnected","reconnectAttempts","setReconnectAttempts","wsRef","reconnectTimeoutRef","maxReconnectAttempts","reconnectDelay","connect","current","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","prev","type","error","onclose","clearTimeout","setTimeout","onerror","close","reconnect"],"sources":["C:/Users/A R Khan/OneDrive/Documents/Nasa/robot/frontend/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\n\nexport const useWebSocket = (url: string) => {\n  const [data, setData] = useState<any>({});\n  const [connected, setConnected] = useState(false);\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Maximum number of reconnection attempts\n  const maxReconnectAttempts = 10;\n  // Reconnection delay in milliseconds\n  const reconnectDelay = 3000;\n\n  useEffect(() => {\n    const connect = () => {\n      try {\n        wsRef.current = new WebSocket(url);\n\n        wsRef.current.onopen = () => {\n          console.log('WebSocket connected');\n          setConnected(true);\n          setReconnectAttempts(0); // Reset attempts on successful connection\n        };\n\n        wsRef.current.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            setData((prev: any) => ({\n              ...prev,\n              [message.type]: message.data\n            }));\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n\n        wsRef.current.onclose = () => {\n          console.log('WebSocket disconnected');\n          setConnected(false);\n          \n          // Attempt to reconnect if we haven't exceeded max attempts\n          if (reconnectAttempts < maxReconnectAttempts) {\n            console.log(`Attempting to reconnect... (${reconnectAttempts + 1}/${maxReconnectAttempts})`);\n            setReconnectAttempts(prev => prev + 1);\n            \n            if (reconnectTimeoutRef.current) {\n              clearTimeout(reconnectTimeoutRef.current);\n            }\n            \n            reconnectTimeoutRef.current = setTimeout(() => {\n              connect();\n            }, reconnectDelay);\n          } else {\n            console.error('Max reconnection attempts reached. Please refresh the page.');\n          }\n        };\n\n        wsRef.current.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          setConnected(false);\n        };\n      } catch (error) {\n        console.error('Failed to create WebSocket connection:', error);\n        setConnected(false);\n        \n        // Attempt to reconnect if we haven't exceeded max attempts\n        if (reconnectAttempts < maxReconnectAttempts) {\n          console.log(`Attempting to reconnect... (${reconnectAttempts + 1}/${maxReconnectAttempts})`);\n          setReconnectAttempts(prev => prev + 1);\n          \n          if (reconnectTimeoutRef.current) {\n            clearTimeout(reconnectTimeoutRef.current);\n          }\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, reconnectDelay);\n        }\n      }\n    };\n\n    connect();\n\n    return () => {\n      // Clear any pending reconnection timeout\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      \n      // Close the WebSocket connection\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [url]);\n\n  // Function to manually trigger a reconnect\n  const reconnect = () => {\n    if (wsRef.current) {\n      wsRef.current.close();\n    }\n    setReconnectAttempts(0);\n    connect();\n  };\n\n  return { data, connected, reconnect };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}